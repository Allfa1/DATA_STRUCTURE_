/*circular queue using array*/

#include <stdio.h>
#include <stdlib.h>

// Define a structure for the circular queue
struct circular_queue {
    int *array;
    int front;
    int rear;
    int size;
};

void create_queue(struct circular_queue *q, int size) {
    q->rear = q->front = -1;
    q->size = size;
    q->array = (int *)malloc(sizeof(int) * size);
    if (q->array == NULL) {
        printf("Memory is not allocated\n");
        exit(1);
    }
}

int isFull(struct circular_queue *q) {
    return ((q->rear + 1) % q->size == q->front);
}

int isEmpty(struct circular_queue *q) {
    return (q->front == -1);
}

void circular_enqueue(struct circular_queue *q, int data) {
    if (isFull(q)) {
        printf("Queue is overflow, cannot perform enqueue operation\n");
    } else {
        if (isEmpty(q)) {
            q->front = 0;
        }
        q->rear = (q->rear + 1) % q->size;
        q->array[q->rear] = data;
        printf("Circular Enqueue operation is successfully completed\n");
    }
}

void circular_dequeue(struct circular_queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty, cannot perform dequeue operation\n");
    } else {
        if (q->front == q->rear) {
            q->front = q->rear = -1;
        } else {
            q->front = (q->front + 1) % q->size;
        }
        printf("Dequeue operation successful\n");
    }
}

void print_queue(struct circular_queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
    } else {
        int i = q->front;
        printf("Queue contents are: ");
        do {
            printf("%d ", q->array[i]);
            i = (i + 1) % q->size;
        } while (i != (q->rear + 1) % q->size);
        printf("\n");
    }
}

int main() {
    int size, choice, data;
    struct circular_queue q;
    printf("Enter the size of the queue: \n");
    scanf("%d", &size);
    create_queue(&q, size);
    while (1) {
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Print Queue\n");
        printf("4. Quit\n");
        printf("Enter your choice: \n");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter the data to enqueue in circular queue: \n");
                scanf("%d", &data);
                circular_enqueue(&q, data);
                break;
            case 2:
                circular_dequeue(&q);
                break;
            case 3:
                print_queue(&q);
                break;
            case 4:
                free(q.array); // Don't forget to free allocated memory
                exit(0);
            default:
                printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}
